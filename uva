#!/usr/bin/env python
from uvaclient import uvaclient
import sys
import requests
import os
import utils

'''

The main driver for the commandline interface

'''

# Each command consists of a function and a help/usage string
class command():
    def __init__(self, func, h):
        self.func = func
        self.h = h

    def __call__(self, *args):
        self.func(*args)

def print_formatted_submissions(submissions):
    max_title_length = max(
        len(submission['problem']['title'])
        for submission in submissions
    )
    max_verdict_length = max(
        len(submission['verdict'])
        for submission in submissions
    )
    max_runtime_length = max(
        len(submission['runtime'])
        for submission in submissions
    )
    max_language_length = max(
        len(submission['language'])
        for submission in submissions
    )

    format_string = "\t".join([
        "Problem: {:" + str(max_title_length) + "}",
        "Verdict: {:" + str(max_verdict_length) + "}",
        "Runtime: {:" + str(max_runtime_length) + "}",
        "Language: {:" + str(max_language_length) + "}"
    ])

    for submission in submissions:
        print format_string.format(
                submission['problem']['title'], submission['verdict'],
                submission['runtime'], submission['language']
            )

# List the last n user submissions
def sub_command(client, args):
    response = client.submissions(*args)
    print_formatted_submissions(response)

# Submit a problem for judging
def submit_command(client, args):
    print "Logging in..."
    client.login()
    print "Submitting..."
    client.submit(*args)
    print "Done!"

# Download and open the PDF problem statement for a given problem
def view_command(client, args):
    if (not unicode(args[0]).isnumeric()):
            print "Invalid problem number"
    else:
        if (not os.path.isfile(args[0] + ".pdf")):
            # TODO make this less ugly
            url = client.get_baseurl() + "external/{0}/{1}.pdf"\
                    .format(int(args[0]) / 100, args[0])
            resp = requests.get(url, stream=True)
            with open(args[0] + ".pdf", "wb") as f:
                for block in resp.iter_content(1024):
                    f.write(block)
        os.system("open " + args[0] + ".pdf")

# Show the help text for each command
def help_command(client, args):
    print_commands()

# Print all commands
def print_commands():
    print "Commands:"
    for name in commands.keys():
        if (name != "help"):
          print "\t" + name + " - " + commands[name].h

# View the leaderboard for a given problem
def leaderboard_command(client, args):
    resp = client.leaderboard(*args)
    print "Problem " + str(args[0]) + ": " + client.get_problem_name(args[0])
    for i in resp:
        print "Rank: " + str(i['rank'])  + " User: " + i['uname'] + " Runtime: " + str(i['run']) + "ms"

# View a given users submissions for a problem
def user_submissions_command(client, args):
    response = client.user_submissions(*args)
    if len(response) == 0 or response[0] == "":
        print "No userdata was found for the user: " + args[0]
    else:
        print_formatted_submissions(response)

# Get the test cases and expected output for a problem from udebug
def testcases_command(client, args):
    resp = client.testcases(args[0])
    if (resp[0] == ""):
        print "There were no pre-generated test cases available"
    else :
        utils.write_file(args[0] + ".test", resp[0])
        utils.write_file(args[0] + ".answer", resp[1])
        print "Test cases saved to " + args[0] + ".test"
        print "Excepted output saved to " + args[0] + ".answer"

# Print username if no new username argument is provided. If provided, your preference will be updated.
def username_command(client, args):
    if (len(args) > 0):
        client.change_username(*args)
    else:
        print client.get_username(*args)

# Print default language if no new language is provided. If provided, your preference will be updated.
def language_command(client, args):
    if (len(args) > 0):
        client.change_language(*args)
    else:
        print client.get_language(*args)

if __name__ == "__main__":
    commands = {
        "help": command(help_command, ""),
        "submissions": command(sub_command, "Usage: uva submissions [n]"),
        "submit": command(submit_command, "Usage: uva submit <problem_number> <source_file> [language code]"),
        "view": command(view_command, "Usage: uva view <problem_number>"),
        "leaderboard": command(leaderboard_command, "Usage: uva leaderboard <problem_number>"),
        "userdata": command(user_submissions_command, "Usage: uva userdata <user> [n]"),
        "test": command(testcases_command, "Usage: uva test <problem_num>"),
        "username": command(username_command, "Usage: uva username [new_username]"),
        "language": command(language_command, "Usage: uva language [new_language]")
    }

    if len(sys.argv) == 1:
        command = ""
    else:
        command = sys.argv[1]
    sys.argv = sys.argv[2:]

    if command in commands:
        u = uvaclient()
        try:
            commands[command](u, sys.argv)
        except KeyboardInterrupt:
            pass
        except Exception as e:
            print commands[command].h
    else:
        print_commands()
